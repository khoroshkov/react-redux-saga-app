{"version":3,"sources":["components/post.module.css","redux/actions.js","redux/types.js","redux/middleware.js","components/Alert.jsx","components/PostForm.jsx","components/Post.jsx","components/Loader.js","components/FetchedPosts.jsx","components/Posts.jsx","App.js","redux/postsReducer.js","redux/appReducer.js","redux/rootReducer.js","redux/sagas.js","index.js"],"names":["module","exports","showAlert","text","dispatch","type","payload","setTimeout","forbiddenWords","Alert","className","role","PostForm","props","submitHandler","event","preventDefault","title","state","trim","newPost","id","Date","now","toString","createPost","setState","changeInputHandler","persist","prev","target","name","value","this","onSubmit","alert","htmlFor","onChange","React","Component","MDTP","post","connect","app","styles","box","content","Loader","useDispatch","posts","useSelector","fetchedPosts","loading","length","map","Post","key","onClick","syncPosts","App","FetchedPosts","initialState","rootReducer","combineReducers","action","sagaWatcher","sagaWorker","takeEvery","put","call","fetchPosts","message","a","fetch","response","json","saga","createSagaMiddleware","store","createStore","compose","applyMiddleware","ReduxThunk","next","found","filter","word","includes","window","__REDUX_DEVTOOLS_EXTENSION__","run","render","document","getElementById"],"mappings":"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","file":"static/js/main.0069dc66.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"content\":\"post_content__W4W23\",\"box\":\"post_box__3Y-3g\"};","import {\r\n  CREATE_POST,\r\n  SHOW_LOADER,\r\n  HIDE_LOADER,\r\n  HIDE_ALERT,\r\n  SHOW_ALERT,\r\n  REQUEST_POSTS,\r\n} from \"./types\";\r\n\r\nexport function createPost(post) {\r\n  return {\r\n    type: CREATE_POST,\r\n    payload: post,\r\n  };\r\n}\r\n\r\nexport function showLoader() {\r\n  return {\r\n    type: SHOW_LOADER,\r\n  };\r\n}\r\n\r\nexport function hideLoader() {\r\n  return {\r\n    type: HIDE_LOADER,\r\n  };\r\n}\r\n\r\nexport function showAlert(text) {\r\n  return (dispatch) => {\r\n    dispatch({\r\n      type: SHOW_ALERT,\r\n      payload: text,\r\n    });\r\n\r\n    setTimeout(() => {\r\n      dispatch(hideAlert());\r\n    }, 3000);\r\n  };\r\n}\r\n\r\nexport function hideAlert() {\r\n  return {\r\n    type: HIDE_ALERT,\r\n  };\r\n}\r\n\r\nexport function fetchPosts() {\r\n  return {\r\n    type: REQUEST_POSTS,\r\n  };\r\n  // return async (dispatch) => {\r\n  //   try {\r\n  //     dispatch(showLoader());\r\n  //     const response = await fetch(\r\n  //       \"https://jsonplaceholder.typicode.com/posts?_limit=5\"\r\n  //     );\r\n  //     const json = await response.json();\r\n\r\n  //     dispatch({ type: FETCH_POSTS, payload: json });\r\n  //     dispatch(hideLoader());\r\n  //   } catch (error) {\r\n  //     dispatch(showAlert(error.message));\r\n  //     dispatch(hideLoader());\r\n  //   }\r\n  // };\r\n}\r\n","export const CREATE_POST = \"CREATE_POST\";\r\nexport const FETCH_POSTS = \"FETCH_POSTS\";\r\nexport const REQUEST_POSTS = \"REQUEST_POSTS\";\r\nexport const SHOW_LOADER = \"SHOW_LOADER\";\r\nexport const HIDE_LOADER = \"HIDE_LOADER\";\r\nexport const SHOW_ALERT = \"SHOW_ALERT\";\r\nexport const HIDE_ALERT = \"HIDE_ALERT\";\r\n","import { CREATE_POST } from \"./types\";\r\nimport { showAlert } from \"./actions\";\r\n\r\nconst forbiddenWords = [\"fuck\", \"drug\", \"asshole\"];\r\n\r\nexport function forbiddenWordsMiddleware({ dispatch }) {\r\n  return function (next) {\r\n    return function (action) {\r\n      if (action.type === CREATE_POST) {\r\n        const found = forbiddenWords.filter((word) =>\r\n          action.payload.title.includes(word)\r\n        );\r\n        if (found.length) {\r\n          return dispatch(showAlert(`You're using forbidden words: ${found}`));\r\n        }\r\n      }\r\n      return next(action);\r\n    };\r\n  };\r\n}\r\n","import React from \"react\";\r\n\r\nconst Alert = ({ text }) => (\r\n  <div className=\"alert alert-warning\" role=\"alert\">\r\n    {text}\r\n  </div>\r\n);\r\n\r\nexport default Alert;\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { createPost, showAlert } from \"../redux/actions\";\r\nimport Alert from \"./Alert\";\r\n\r\nclass PostForm extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      title: \" \",\r\n    };\r\n  }\r\n\r\n  submitHandler = (event) => {\r\n    event.preventDefault();\r\n\r\n    const { title } = this.state;\r\n\r\n    if (!title.trim()) {\r\n      return this.props.showAlert(\"You did not create any post\");\r\n    }\r\n\r\n    const newPost = {\r\n      title,\r\n      id: Date.now().toString(),\r\n    };\r\n\r\n    this.props.createPost(newPost);\r\n\r\n    this.setState({ title: \"\" });\r\n  };\r\n\r\n  changeInputHandler = (event) => {\r\n    event.persist();\r\n    this.setState((prev) => ({\r\n      ...prev,\r\n      ...{\r\n        [event.target.name]: event.target.value,\r\n      },\r\n    }));\r\n  };\r\n\r\n  render() {\r\n    const { title } = this.state;\r\n    return (\r\n      <form onSubmit={this.submitHandler}>\r\n        {this.props.alert && <Alert text={this.props.alert} />}\r\n        <div className=\"form-group\">\r\n          <label htmlFor=\"title\">Post title</label>\r\n          <input\r\n            type=\"text\"\r\n            className=\"form-control\"\r\n            id=\"title\"\r\n            value={title}\r\n            name=\"title\"\r\n            onChange={this.changeInputHandler}\r\n          />\r\n        </div>\r\n        <button className=\"btn btn-success\" type=\"submit\">\r\n          Create Post\r\n        </button>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nconst MSTP = (state) => ({\r\n  alert: state.app.alert,\r\n});\r\n\r\nconst MDTP = {\r\n  createPost,\r\n  showAlert,\r\n};\r\n\r\nexport default connect(MSTP, MDTP)(PostForm);\r\n","import React from \"react\";\r\nimport styles from \"./post.module.css\"\r\n\r\nexport default ({post}) => {\r\n  return(\r\n    <div className={styles.box}>\r\n    <div className={styles.content}>\r\n      <h5 className=\"card-title\">{post.title}</h5>\r\n      </div>\r\n    </div>\r\n  )\r\n}","import React from \"react\";\r\n\r\nconst Loader = () => (\r\n  <div className=\"spinner-border text-info\" role=\"status\">\r\n    <span className=\"sr-only\">Loading...</span>\r\n  </div>\r\n);\r\n\r\nexport default Loader;\r\n","import React from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { fetchPosts } from \"../redux/actions\";\r\nimport Post from \"./Post\";\r\nimport Loader from \"./Loader\";\r\n\r\nexport default () => {\r\n  const dispatch = useDispatch();\r\n  const posts = useSelector((state) => state.posts.fetchedPosts);\r\n  const loading = useSelector((state) => state.app.loading);\r\n\r\n  if (loading) {\r\n    return <Loader />;\r\n  }\r\n\r\n  if (!posts.length) {\r\n    return (\r\n      <button\r\n        className=\"btn btn-primary\"\r\n        onClick={() => dispatch(fetchPosts())}\r\n      >\r\n        Download saved posts\r\n      </button>\r\n    );\r\n  }\r\n  return posts.map((post) => <Post post={post} key={post.id} />);\r\n};\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport Post from \"./Post\";\r\n\r\nconst Posts = ({ syncPosts }) => {\r\n  if (!syncPosts.length) {\r\n    return <p className=\"text-center\">There are no created posts yet</p>;\r\n  }\r\n  return syncPosts.map((post) => <Post post={post} key={post.id} />);\r\n};\r\n\r\nconst MSTP = state => {\r\n  return {\r\n    syncPosts: state.posts.posts\r\n  }\r\n}\r\n\r\nexport default connect(MSTP)(Posts);\r\n","import React from \"react\";\nimport PostForm from \"./components/PostForm\";\nimport FetchedPosts from \"./components/FetchedPosts\";\nimport Posts from \"./components/Posts\";\n\nfunction App() {\n  return (\n    <div className=\"container pt-3\">\n      <h1>React-Redux-Saga App</h1>\n      <div className=\"row\">\n        <div className=\"col\">\n          <PostForm />\n        </div>\n      </div>\n      <div className=\"row\">\n        <div className=\"col\">\n          <h2>Created Posts</h2>\n          <Posts />\n        </div>\n        <div className=\"col\">\n          <h2>Saved Posts</h2>\n          <FetchedPosts />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { CREATE_POST, FETCH_POSTS } from \"./types\";\r\n\r\nconst initialState = {\r\n  posts: [],\r\n  fetchedPosts: [],\r\n};\r\n\r\nexport const postsReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case CREATE_POST:\r\n      return { ...state, posts: [...state.posts, action.payload] }\r\n    case FETCH_POSTS:\r\n    return {...state, fetchedPosts: action.payload}\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import { SHOW_LOADER, HIDE_LOADER, SHOW_ALERT, HIDE_ALERT } from \"./types\";\r\n\r\nconst initialState = {\r\n  loading: false,\r\n  alert: null,\r\n};\r\n\r\nexport const appReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case SHOW_LOADER:\r\n      return {\r\n        ...state,\r\n        loading: true,\r\n      };\r\n    case HIDE_LOADER:\r\n      return {\r\n        ...state,\r\n        loading: false,\r\n      };\r\n    case SHOW_ALERT:\r\n      return {\r\n        ...state,\r\n        alert: action.payload,\r\n      };\r\n    case HIDE_ALERT:\r\n      return {\r\n        ...state,\r\n        alert: null,\r\n      };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import { combineReducers } from \"redux\";\r\nimport { postsReducer } from \"./postsReducer\";\r\nimport { appReducer } from \"./appReducer\";\r\n\r\nexport const rootReducer = combineReducers({\r\n  posts: postsReducer,\r\n  app: appReducer,\r\n});\r\n","import { takeEvery, put, call } from \"redux-saga/effects\";\r\nimport { REQUEST_POSTS, FETCH_POSTS } from \"./types\";\r\nimport { showLoader, hideLoader, showAlert } from \"./actions\";\r\n\r\nexport function* sagaWatcher() {\r\n  yield takeEvery(REQUEST_POSTS, sagaWorker);\r\n}\r\n\r\nfunction* sagaWorker() {\r\n  try {\r\n    yield put(showLoader());\r\n    const payload = yield call(fetchPosts);\r\n    yield put({ type: FETCH_POSTS, payload });\r\n    yield put(hideLoader());\r\n  } catch (error) {\r\n    yield put(showAlert(error.message));\r\n    yield put(hideLoader());\r\n  }\r\n}\r\n\r\nasync function fetchPosts() {\r\n  const response = await fetch(\r\n    \"https://jsonplaceholder.typicode.com/posts?_limit=5\"\r\n  );\r\n  return await response.json();\r\n}\r\n","import React from \"react\";\nimport { render } from \"react-dom\";\nimport { compose, createStore, applyMiddleware } from \"redux\";\nimport { Provider } from \"react-redux\";\nimport ReduxThunk from \"redux-thunk\";\nimport createSagaMiddleware from \"redux-saga\";\nimport { forbiddenWordsMiddleware } from \"./redux/middleware\";\nimport App from \"./App\";\nimport { rootReducer } from \"./redux/rootReducer\";\nimport { sagaWatcher } from \"./redux/sagas\";\n\nconst saga = createSagaMiddleware();\n\nconst store = createStore(\n  rootReducer,\n  compose(\n    applyMiddleware(ReduxThunk, forbiddenWordsMiddleware, saga),\n    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n  )\n);\n\nsaga.run(sagaWatcher);\n\nconst app = (\n  <Provider store={store}>\n    <App />\n  </Provider>\n);\n\nrender(app, document.getElementById(\"root\"));\n"],"sourceRoot":""}